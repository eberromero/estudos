unit Classe.Pessoa;

interface

uses
  System.SysUtils;

type
  TPessoa = class
    private
      FNome     : String;
      FDataNasc : String;
      FEtnia    : String;
      FSexo     : String;
      function  getNome: String;
      procedure setNome(const Value: String);
      procedure SetDataNasc(const Value: String);
      procedure SetEtnia(const Value: String);
      procedure SetSexo(const Value: String);
    public
      property DataNasc : String read FDataNasc write SetDataNasc;
      property Sexo     : String read FSexo     write SetSexo;
      property Etnia    : String read FEtnia    write SetEtnia;
      property Nome     : String read getNome   write SetNome;
      function Idade    : Integer;
      function Receber(I: Integer) : String; overload;
      function Receber(I: Currency) : String; overload;
      function Receber(A, B: Integer) : String; overload;
  end;

implementation

{ TPessoa }

function TPessoa.getNome: String;
begin
  Result := FNome;
end;

procedure TPessoa.SetNome(const Value: String);
begin
  if Value = EmptyStr then
    raise Exception.Create('Valor não pode ser vazio');
  FNome := Value;
end;

procedure TPessoa.SetSexo(const Value: String);
begin
  FSexo := Value;
end;

function TPessoa.Idade: Integer;
begin
  Result := Trunc((now - StrToDate(DataNasc)) / 365.25);
end;

function TPessoa.Receber(I: Currency): String;
begin
  Result := 'Recebi um valor currency: ' + CurrToStr(I);
end;

function TPessoa.Receber(I: Integer): String;
begin
  Result := 'Recebi um valor inteiro: ' + IntToStr(I);
end;

procedure TPessoa.SetDataNasc(const Value: String);
begin
  FDataNasc := Value;
end;

procedure TPessoa.SetEtnia(const Value: String);
begin
  FEtnia := Value;
end;

function TPessoa.Receber(A, B: Integer): String;
begin
  Result := 'A soma desses inteiros é: ' + IntToStr(5+5);
end;

end.
